#!/usr/bin/expect -f
#
# /usr/local/bin/sshchpwd.exp
#
# Expect script to change login passwords using SSH, with support for one-time
# tokens (like SecurID), expired passwords (changed before arriving at the
# prompt), on Solaris, AIX, Linux, etc.
#
# License: GPLv3
# License URI: http://www.gnu.org/licenses/gpl.txt
#
# Copyright 2012-2016 Jean-Sebastien Morisset (http://surniaulula.com/)
#
# Example:
#
#	$ export OLD_PASSWORD="oldpwd"
#	$ export NEW_PASSWORD="newpwd"
#	$ ./sshchpwd {server} {port} {token}
#
# The {port} and {token} command-line parameters are optional. If the server
# uses SecurID (or another one-time password), enter it on the command-line as
# the third parameter.
#
# For use proxy
# set proxy variable to 1
# export PROXY_HOST=127.0.0.1
# export export PROXY_PORT=1080

set timeout 15
set server [lindex $argv 0]
set port [lindex $argv 1]
set tokpwd [lindex $argv 2]
set oldpwd $env(OLD_PASSWORD)
set newpwd $env(NEW_PASSWORD)
set prompt "\[>%\\$#\]"
set proxy 0

if { $port == "" }  { set port "22" }
if { $tokpwd == "" }  { set tokpwd $oldpwd }

send_user "connecting to $server on port $port\n"
if { $proxy == 1 } {
	set proxy_host $env(PROXY_HOST)
	set proxy_port $env(PROXY_PORT)
	send_user "Using proxy $proxy_host:$proxy_port\n"  
	spawn ssh -o "ProxyCommand=/usr/bin/nc --proxy-type socks4 --proxy $proxy_host:$proxy_port %h %p" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $server
} else {
	spawn ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -p $port $server
}

# Mission of this first expect - get to the shell command prompt. If the
# password is expired and we have to change it before getting to the prompt,
# then exit 0 (success).

expect {
	"(yes/no)? " {
		send_user " (detected unknown host key - accepting)\n"
		send "yes\n"
		send_user " (continuing expect loop)\n"
		exp_continue
	}
	-re "assword:| contraseña de UNIX" {
		send_user " (detected password login prompt - possibly token)\n"
		send "$tokpwd\n"
		expect {
			-re "\[nN\]ew \[pP\]assword:|\[nN\]ew \[pP\]assword \[aA\]gain:|ueva contraseña:|\[nN\]ew UNIX password" {
				send "$newpwd\n"
				expect {
					"between changes." {
						send_error "1;$server;Necesary more time between changes.\n"
						exit 1
					}
					-re "\[nN\]ew \[pP\]assword:|\[nN\]ew \[pP\]assword \[aA\]gain:|ueva contraseña:|\[nN\]ew UNIX password" {
						send "$newpwd\n"
						expect {
							-re "$prompt" {
								send_user " (detected shell command prompt)\n"
								send_error "0;$server;Password successfully changed.\n"
								exit 0
							}
							"Connection to " {
								send_user " (detected connection closed - assuming password change successful)\n"
								send_error "0;$server;Password successfully changed.\n"
								exit 0
							}
							default {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
						}
					}
				}
			}
			-re " UNIX \[pP\]assword:| contraseña de UNIX" {
				send_user " (detected additional password prompt - old password)\n"
				send "$oldpwd\n"
				send_user " (continuing expect loop)\n"
				exp_continue
			}
			-nocase "old password:" {
				send_user " (detected password expired prompt)\n"
				send "$oldpwd\n"
				send_user " (continuing expect loop)\n"
				exp_continue
			}
			-re "not match the|password mismatch" {
				send_user " (assuming expired password change failed)\n"
				send "passwd\n"
				expect {
					-nocase "old password:" {
						send_user " (trying with new password)\n"
						send "$newpwd\n"
						expect {
							-re "\[nN\]ew \[pP\]assword:|\[nN\]ew \[pP\]assword \[aA\]gain:" {
								send_error "0;$server;Password is current.\n"
								exit 0
							}
							"not match the" {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
							default {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
						}
					}
					default {
						send_error "1;$server;Password change failed.\n"
						exit 1
					}
				}
			}
			"assword:" {
				send "$newpwd\n"
				expect {
					" UNIX password:" {
						send_error "1;$server;New password is expired!\n"
						exit 1
					}
					-nocase "old password:" {
						send_error "1;$server;New password is expired!\n"
						exit 1
					}
					"assword:" {
						send_error "1;$server;Automated login failed.\n"
						exit 1
					}
					-re "$prompt" {
						send_user " (detected shell command prompt)\n"
						send_error "0;$server;Password is current.\n"
						exit 0
					}
					default {
						send_error "1;$server;Automated login failed.\n"
						exit 1
					}
				}
			}
			-re "$prompt" { send_user " (detected shell command prompt)\n" }
		}
	}
	-re "$prompt" { send_user " (detected shell command prompt)\n" }
}

send "\n"

expect {
	-re "$prompt" {
		send_user " (changing password at prompt)\n"
		send "passwd\n"
		expect {
			-re "\[oO\]ld \[pP\]assword:| UNIX \[pP\]assword:| anterior:| contraseña de UNIX" {
				send "$oldpwd\n"
				expect {
					-re "You must wait longer|Debe esperar" {
						send_error "1;$server;You must wait longer.\n"
						exit 1
					}
					-re "not match the|password mismatch" {
						send "passwd\n"
						expect {
							-nocase "old password:" {
								send_user " (trying with new password)\n"
								send "$newpwd\n"
								expect {
									-re "\[nN\]ew \[pP\]assword:|\[nN\]ew \[pP\]assword \[aA\]gain:" {
										send_error "0;$server;Password is current.\n"
										exit 0
									}
									"not match the" {
										send_error "1;$server;Password change failed.\n"
										exit 1
									}
									default {
										send_error "1;$server;Password change failed.\n"
										exit 1
									}
								}
							}
							default {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
						}
					}
					-re "\[nN\]ew \[pP\]assword:|\[nN\]ew \[pP\]assword \[aA\]gain:" {
						send "$newpwd\n"
						expect {
							"between changes." {
								send_error "1;$server;You must wait longer.\n"
								exit 1
							}
							-re "\[nN\]ew \[pP\]assword:|\[nN\]ew \[pP\]assword \[aA\]gain:" {
								send "$newpwd\n"
								expect {
									-re "$prompt" {
										send_user " (detected return to shell command prompt)\n"
										send_error "0;$server;Password successfully changed.\n"
										exit 0
									}
									default {
										send_error "1;$server;Password change failed.\n"
										exit 1
									}
								}
							}
							"BAD PASSWORD" {
								send_error "1;$server;BAD PASSWORD.\n"
								exit 1
							}
							default {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
						}
					}
					"contraseña:" {
						send "$newpwd\n"
						expect {
							"contraseña:" {
								send "$newpwd\n"
								expect {
									-re "$prompt" {
										send_user " (detected return to shell command prompt)\n"
										send_error "0;$server;Password successfully changed.\n"
										exit 0
									}
									default {
										send_error "1;$server;Password change failed.\n"
										exit 1
									}
								}
							}
							default {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
						}
					}
					"New UNIX password: " {
						send "$newpwd\n"
						expect {
							"Retype new UNIX password: " {
								send "$newpwd\n"
								expect {
									-re "$prompt" {
										send_user " (detected return to shell command prompt)\n"
										send_error "0;$server;Password successfully changed.\n"
										exit 0
									}
									default {
										send_error "1;$server;Password change failed.\n"
										exit 1
									}
								}
							}
							default {
								send_error "1;$server;Password change failed.\n"
								exit 1
							}
						}
					}
					default {
						send_error "1;$server;Password change failed.\n"
						exit 1
					}
				}
			}
		}
	}
	default {
		send_error "1;$server;No connectivity to machine.\n"
		exit 1
	}
}
